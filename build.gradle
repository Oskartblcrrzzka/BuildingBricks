plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
    id "com.matthewprenger.cursegradle" version "1.0.1"
}

repositories {
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
}

version = "1.0.3"
group = "com.hea3ven.buildingbricks"
archivesBaseName = "BuildingBricks"

minecraft {
    version = "1.8-11.14.3.1513"
    runDir = "run"

    mappings = "snapshot_20141130"

    replace "PROJECTVERSION", project.version
    replace "MCVERSION", project.minecraft.version
    replace "FORGEVERSION", project.minecraft.forgeVersion
}

curseforge {
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''

    project {
        id = '236150'
        releaseType = 'release'
        changelog = readCurrentChangelog()
        addGameVersion '1.8'
    }
}

configurations {
    runmods
}

dependencies {
    runmods "codechicken:CodeChickenCore:1.8-1.0.5.34:dev"
    runmods "codechicken:NotEnoughItems:1.8-1.0.5.82:dev"

    testCompile "junit:junit:4.12"
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "forgeversion", project.minecraft.forgeVersion

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'forgeversion':project.minecraft.forgeVersion
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task copyRunMods(type: Copy) {
    from configurations.runmods.files
    into minecraft.runDir + "/mods/"
}
setupDecompWorkspace.dependsOn copyRunMods

task updateChangelog (dependsOn: 'build') << {
    def changelogData = new File("CHANGELOG").getText()
    if (!changelogData.startsWith(project.version)) {
        new File("CHANGELOG").write(project.version + ":\n" + changelogData);
    }
}

task updateReadme (dependsOn: 'curseforge') << {
    def mediafireUrl = System.console().readLine('> enter mediafire url: ')
    def curseFileId = System.console().readLine('> enter curse file id: ')

    new File("README.md.tmp").withWriter { w ->
        new File("README.md").eachLine { line ->
            if (line.startsWith("MediaFire: [Building Bricks")) {
                line = "MediaFire: [Building Bricks " + project.version + "]("+ mediafireUrl + ")"
            } else if (line.startsWith("Curse: [Building Bricks")) {
                line = "Curse: [Building Bricks " + project.version + "](http://www.curse.com/mc-mods/Minecraft/236150-building-bricks/"+ curseFileId + ")"
            }
            w << line + "\n"
        }
    }

    new File("README.md").delete()
    new File("README.md.tmp").renameTo(new File("README.md"))
}

task commitRelease (type: Exec, dependsOn: [updateChangelog, updateReadme]) << {
    commandLine 'git', 'commit', '-am', 'Version ' + project.version
}

task pushRelease (type: Exec, dependsOn: [commitRelease]) {
    commandLine 'git', 'push'
}

task release (dependsOn: pushRelease) << {
    println "Released v" + project.version
}

def readCurrentChangelog() {
    def changelog = ''
    def ended = false
    new File("CHANGELOG").eachLine { line ->
        if (!ended) {
            if (line.equals('')) {
                ended = true
            } else {
                changelog += line + "\n"
            }
        }
    }
    if (!changelog.startsWith(project.version))
        changelog = project.version + ":\n" + changelog
    return changelog
}
